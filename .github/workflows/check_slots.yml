name: Badminton Slot Checker

on:
  schedule:
    # Run every 15 minutes during peak hours (9 AM to 11 PM IST)
    # GitHub Actions uses UTC, so IST = UTC + 5:30
    # 9 AM IST = 3:30 AM UTC, 11 PM IST = 5:30 PM UTC
    - cron: '*/15 3-17 * * *'  # Every 15 minutes from 3:30 AM to 5:30 PM UTC
  
  workflow_dispatch:
    inputs:
      check_mode:
        description: 'Check mode'
        required: false
        default: 'single'
        type: choice
        options:
          - single
          - test
      specific_date:
        description: 'Specific date to check (YYYY-MM-DD, optional)'
        required: false
        type: string
      verbose:
        description: 'Enable verbose logging'
        required: false
        default: false
        type: boolean

jobs:
  check-badminton-slots:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          
      - name: Cache Playwright browsers
        uses: actions/cache@v3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-playwright-
            
      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Install Playwright browsers
        run: |
          playwright install chromium
          playwright install-deps chromium
          
      - name: Verify installation
        run: |
          python --version
          pip list | grep playwright
          
      - name: Update dates if specific date provided
        if: github.event.inputs.specific_date != ''
        run: |
          python -c "
          import json
          import os
          from datetime import datetime, timedelta
          
          # Load current config
          with open('config/check_dates.json', 'r') as f:
              config = json.load(f)
          
          # Update with specific date or next few days
          specific_date = '${{ github.event.inputs.specific_date }}'
          if specific_date:
              config['dates_to_check'] = [specific_date]
          else:
              # Default to next 3 days
              today = datetime.now()
              dates = [(today + timedelta(days=i)).strftime('%Y-%m-%d') for i in range(3)]
              config['dates_to_check'] = dates
          
          # Save updated config
          with open('config/check_dates.json', 'w') as f:
              json.dump(config, f, indent=4)
          
          print(f'Updated dates to check: {config[\"dates_to_check\"]}')
          "
          
      - name: Create data directories
        run: |
          mkdir -p data logs
          
      - name: Run badminton slot checker
        env:
          PHONE_NUMBER: ${{ secrets.PHONE_NUMBER }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          OTP_CODE: ${{ secrets.OTP_CODE }}
          HEADLESS_BROWSER: 'true'
          BROWSER_TIMEOUT: '45000'
          LOG_LEVEL: ${{ github.event.inputs.verbose == 'true' && 'DEBUG' || 'INFO' }}
        run: |
          cd src
          python main.py --mode ${{ github.event.inputs.check_mode || 'single' }} ${{ github.event.inputs.verbose == 'true' && '--verbose' || '' }}
          
      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: error-logs-${{ github.run_number }}
          path: |
            logs/
            data/
          retention-days: 7
          
      - name: Upload slot data on success
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: slot-data-${{ github.run_number }}
          path: data/
          retention-days: 3
          
      - name: Cleanup old artifacts
        if: always()
        run: |
          # This step helps manage artifact storage
          echo "Cleaning up temporary files..."
          rm -rf browser_data/
          rm -f data/cookies.json data/session.json
          
      - name: Post-run summary
        if: always()
        run: |
          echo "## Run Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Mode:** ${{ github.event.inputs.check_mode || 'single' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "data/latest_slots.json" ]; then
            SLOT_COUNT=$(python -c "import json; data=json.load(open('data/latest_slots.json')); print(data.get('total_slots', 0))")
            echo "- **Slots Found:** $SLOT_COUNT" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Slots Found:** 0 (or error occurred)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **Timestamp:** $(date)" >> $GITHUB_STEP_SUMMARY

  # Optional: Weekly summary job
  weekly-summary:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    # Run only on Sundays at 10 AM IST (4:30 AM UTC)
    schedule:
      - cron: '30 4 * * 0'
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Send weekly summary
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python -c "
          import requests
          import os
          from datetime import datetime, timedelta
          
          # Send weekly summary notification
          bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
          chat_id = os.getenv('TELEGRAM_CHAT_ID')
          
          if bot_token and chat_id:
              message = f'''
          üìä WEEKLY BADMINTON CHECKER REPORT
          
          ‚è∞ Week ending: {datetime.now().strftime('%d %b %Y')}
          
          ü§ñ System Status: Active
          üîç Automated checking every 15 minutes
          üì± Notifications via Telegram
          
          üìà Check GitHub Actions for detailed run history
          üè∏ Happy playing!
              '''.strip()
          
              url = f'https://api.telegram.org/bot{bot_token}/sendMessage'
              requests.post(url, json={'chat_id': chat_id, 'text': message})
              print('Weekly summary sent')
          else:
              print('Telegram credentials not configured')
          "
